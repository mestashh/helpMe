RDF Schema (RDFS) – это стандарт для задания простейших онтологий (схем) поверх данных RDF. RDFS предоставляет базовый набор терминов для описания классов, свойств и иерархий. Ключевые возможности RDFS включают:
Определение классов (rdfs:Class) – категорий объектов. Например, можно объявить класс Student и класс Person.
Задание отношений наследования классов через rdfs:subClassOf – позволяет строить таксономию. Например, указав Student rdfs:subClassOf Person, мы обозначаем, что студент – это частный случай персоны (каждый Student является Person).
Определение свойств (rdf:Property) – отношений между субъектами и объектами. Свойства также могут образовывать иерархии (rdfs:subPropertyOf).
Указание для каждого свойства его домена и диапазона значений (rdfs:domain, rdfs:range). Domain определяет, к какому классу должен принадлежать субъект отношения, а range – к какому классу или типу данных принадлежит объект.
Например, свойству hasAuthor можно задать: domain = Book, range = Person, что означает «это свойство применяется к ресурсам типа Книга и принимает значения типа Персона».
Важно отметить, что семантика RDFS носит нестрогий, открытый характер: указание domain/range не ограничивает использование свойства строго указанными классами, но позволяет делать выводы. Например, если в триплете :book1 :hasAuthor :alice определено hasAuthor rdfs:domain Book,
то reasoner может вывести, что :book1 rdf:type Book (т.е. book1 – ресурс типа Книга по причине использования свойства автор). Аналогично, range позволяет выводить тип объекта. Сравнение RDFS с OWL: RDFS предоставляет лишь ограниченный аппарат для онтологического моделирования.
RDFS поддерживает простую иерархию классов/свойств и типизацию, но не может выражать сложные ограничения. OWL же значительно богаче: он включает все возможности RDFS и добавляет возможность описывать отношения между классами (эквивалентность, дисжойнтность),
вводить ограничительные свойства (транзитивные, симметричные и т.п.), задавать числовые ограничения (кардинальности), определять классы через условия (например, класс «AdultStudent» как пересечение Student и условие age>=18) и многое другое.
Таким образом, OWL – более мощный язык, построенный на строгой логической основе (дескриптивная логика), позволяющий автоматическим выводам выявлять скрытые зависимости. RDFS проще и гарантированно выполним (его вывод тривиален и не потребует сложных алгоритмов),
OWL же в общих своих вариантах (OWL Full) может приводить к неразрешимости некоторых выводов, поэтому чаще используют профиль OWL DL, где вывод гарантированно завершается. Пример онтологии в RDFS: Рассмотрим предметную область «университет». Создадим простую онтологию на RDFS,
описывающую отношения студентов и курсов:
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix ex:   <http://university.example/#> .

# Определяем классы
ex:Person    a rdfs:Class .
ex:Student   a rdfs:Class ; 
            rdfs:subClassOf ex:Person .    # Student – подкласс Person
ex:Course    a rdfs:Class .

# Определяем свойства
ex:enrolledIn   a rdf:Property ;
               rdfs:domain ex:Student ;
               rdfs:range  ex:Course .
ex:name         a rdf:Property ;
               rdfs:domain ex:Person ;
               rdfs:range  rdfs:Literal .
В этой онтологии мы объявили три класса: Person (Персона), Student (Студент) и Course (Учебный курс). Задано, что Student является подклассом Person, то есть каждый студент – это человек. Далее определены два свойства.
Свойство enrolledIn («записан на») связывает студента с курсом: с помощью domain указано, что субъектом этого свойства должен быть экземпляр Student, а с помощью range – что объектом является экземпляр Course.
Свойство name описывает имя персоны; мы указали, что name применяется к ресурсам типа Person и имеет в качестве значения литерал (строку) – через rdfs:Literal в range.
