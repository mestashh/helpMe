OWL (Web Ontology Language) – язык для создания богатых онтологий, расширяющий возможности RDF/S. OWL опирается на строгую математическую основу (дескриптивную логику) и позволяет более точно и выразительно моделировать отношения и ограничения между сущностями.
В OWL определены следующие основные конструктивные элементы онтологий
Классы – множества сущностей (например, класс Человек). Классы могут быть организованы в иерархии (суперклассы и подклассы), как и в RDFS, но OWL также позволяет задавать сложные определения классов (через логические выражения).
Объектные свойства – отношения между экземплярами классов (например, свойство имеет друга между двумя людьми). OWL позволяет задавать характеристики свойств: транзитивность (например, «предок»), симметричность («является супругом»)
Свойства данных (datatype properties) – отношения между экземпляром класса и литералом-значением (например, свойство имеет рост для связи человека с числовым значением его роста).
Индивиды (экземпляры) – конкретные объекты, принадлежащие классам (например, индивид ex:Alice как экземпляр класса Человек). Экземпляры могут участвовать в отношениях, определенных свойствами. (В OWL индивиды могут быть объявлены анонимно – blank nodes – подобно RDF).
Типы данных (datatypes) – стандартизированные типы для литералов, такие как xsd:string, xsd:integer и т.п., используемые как диапазоны значений свойств данных.
Аксиомы – логические утверждения об отношениях между классами, свойствами и индивидами. Например, аксиома «Примат является подклассом Животного», или «Student и Professor – непересекающиеся (disjoint) классы». Аксиомы задают правила, на основе которых reasoner может делать выводы.
OWL vs RDFS: Возможности OWL значительно превосходят RDFS. RDFS, по сути, предоставляет только иерархическую классификацию и аннотации domain/range для свойств. OWL же позволяет:
Выражать сложные связи между классами: эквивалентность (owl:equivalentClass), раздельность (owl:disjointWith), определять класс через пересечение (owl:intersectionOf) или объединение (owl:unionOf) других классов.
Вводить ограничения на свойства: кардинальности (owl:cardinality, min/max/exactly – ограничения на число связей), ограничения по типу или принадлежности (owl:allValuesFrom, owl:someValuesFrom – «для всех значений свойства справедливо..., существует значение свойства такое, что...») и др.
Устанавливать характеристики свойств: транзитивность (owl:TransitiveProperty), симметричность (owl:SymmetricProperty), инверсии свойств (owl:inverseOf) и т.п.
Задавать отношения между индивидуальными объектами: например, утверждать, что два разных URI-ссылки представляют один и тот же реальный объект (owl:sameAs), или что два индивида различны (owl:differentFrom).
OWL онтология, таким образом, способна не только классифицировать сущности, но и задать строгие правила, на основании которых автоматически выводятся новые знания.
Пример: если в OWL-онтологии указать аксиомы «каждый студент является человеком» и «Алиса – студент», reasoner заключит «Алиса – человек». Более сложный пример: пусть определено, что класс AdultStudent эквивалентен пересечению класса Student с ограничением age >= 18.
Если у индивида ex:Bob указано ex:age = 20 и rdf:type ex:Student, reasoner выведет, что ex:Bob rdf:type ex:AdultStudent (Боб – совершеннолетний студент). RDFS не мог бы сделать такой вывод, т.к. не умеет работать с ограничениями и комбинацией условий.

